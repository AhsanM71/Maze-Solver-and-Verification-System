@startuml MainConcepts
!define MyTheme
skinparam class {
    BackgroundColor #LightYellow
    BorderColor #000000
    FontColor #000000
}

skinparam stereotypeCBackgroundColor #LightYellow
skinparam stereotypeCBorderColor #000000
skinparam stereotypeCFontColor #000000


package algorithms{
    class RHRuleSol
    class BFSSol

    interface PathFinder{
        + mazeSolver(maze: Maze, format: Path): String 
    }
}

package benchmarking{
    class Benchmark{
        
    }
    interface Performance {
        + runPerformance(): void
    }
}

package factory{
    interface AlgorithmFactory{
        + runMazeSolver(config: Configuration, maze: Maze, verify: PathVerifier): void
    }
    class SolveFactory{
        + runMazeSolver(): void
    }
}

package maze{
    enum CellType{
        PATH, WALL
    }
    interface FileProcessor{
        + mazeDimension(): int[]
        + builder(): void
        + renderMaze(): void
        + getMaze(): MazeCell[][]
    }
    class Maze{
        + buildMaze(): void
        + isPathValid(col: int, row: int): boolean
        + findStartPos(): Position
        + findEndPos(): Position
    }
    class MazeBuilder

    class MazeCell
}

package runner{
    enum Direction{
        NORTH, EAST,
        SOUTH, WEST
    }
    interface Player{
        + checkForward(maze: Maze): boolean
        + checkRight(maze: Maze): boolean
        + isExitReached(): boolean
        + moveF(): void
        + turnRight(): void
        + turnLeft(): void
    }
    class Position{
        + equals(obj: Object): boolean
    }
    class Runner
}

package verification {
    class VerifyPath

    interface PathVerifier{
        + VerifyGivenPath(maze: Maze, p: Path): boolean
    }

}

class Configuration{
    + getPaths(args: String[]): void
}

class Main

class Path {
    + factorizedToCanonical(): String
    + canonicalToFactorized(): String
    + strToList(path: String): List<String>
    + listToStr(path: List<String>): String
}

' algorithms:
PathFinder <|.. RHRuleSol
PathFinder <|.. BFSSol
Path -right-> BFSSol
Path -up-> RHRuleSol

' maze:
FileProcessor <|.. MazeBuilder
FileProcessor <-up-o Maze
Maze o--> MazeCell
MazeCell <-- CellType

' runner:
Player <|.. Runner
Runner <-left- Direction
Runner <-right- Position

' path:
PathVerifier <|.. VerifyPath

' factory:
SolveFactory ..left..|> AlgorithmFactory

' benchmarking:
Benchmark .up.|> Performance

Main *-left-> AlgorithmFactory
Main *-down-> PathVerifier
Main *-left-> Configuration
Main *--> Maze

SolveFactory *--right--> Performance
SolveFactory *--> PathFinder
SolveFactory o--> Path

VerifyPath *---> Player
VerifyPath --right-> Path

RHRuleSol *-left-> Player
BFSSol *-down-> Player
BFSSol o-right-> Position

Benchmark --> Path
@enduml