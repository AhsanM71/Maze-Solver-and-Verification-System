@startuml MainConcepts
!define MyTheme
skinparam class {
    BackgroundColor #LightYellow
    BorderColor #000000
    FontColor #000000
}

skinparam stereotypeCBackgroundColor #LightYellow
skinparam stereotypeCBorderColor #000000
skinparam stereotypeCFontColor #000000


package algorithms{
    class RHRuleSol
    class BFSSol

    interface PathFinder{
        + mazeSolver(maze: Maze, format: PathFormatter): String 
    }

    class PathFormatter {
        + factorizedForm(path: ArrayList<String>): String
        + strToList(path: String): List<String>
    }
}

package benchmarking{
    class Benchmark{
        
    }
    interface Performance {
        + runPerformance(): void
    }
}

package factory{
    interface AlgorithmFactory{
        + runMazeSolver(paths: List<String>, maze: Maze, verify: PathVerifier): void
    }
    class SolveFactory{
        + runMazeSolver(): void
    }
}

package maze{
    enum CellType{
        PATH, WALL
    }
    interface FileProcessor{
        + mazeDimension(): int[]
        + builder(): void
        + renderMaze(): void
        + getMaze(): MazeCell[][]
    }
    class Maze{
        + isPathValid(col: int, row: int): boolean
        + findStartPos(): Position
        + findEndPos(): Position
    }
    class MazeBuilder

    class MazeCell
}

package runner{
    enum Direction{
        NORTH, EAST,
        SOUTH, WEST
    }
    interface Player{
        + checkForward(maze: Maze): boolean
        + checkRight(maze: Maze): boolean
        + isExitReached(): boolean
        + moveF(): void
        + turnRight(): void
        + turnLeft(): void
    }
    class Position{
        + equals(obj: Object): boolean
        + hashCode(): int
    }
    class Runner
}

package path {
    class VerifyPath

    interface PathVerifier{
        + VerifyGivenPath(maze: Maze, path: String): boolean
    }

}

class Configuration{
    + getPaths(args: String[]): List<String>
}

class Main

' algorithms:
PathFinder <|.. RHRuleSol
PathFinder <|.. BFSSol
PathFormatter -up-> BFSSol
PathFormatter -up-> RHRuleSol

' maze:
FileProcessor <|.. MazeBuilder
FileProcessor <-up-o Maze
Maze o--> MazeCell
MazeCell <-- CellType

' runner:
Player <|.. Runner
Runner <-- Direction
Runner <-- Position

' path:
PathVerifier <|.. VerifyPath

' factory:
SolveFactory ..|> AlgorithmFactory

' benchmarking:
Benchmark .up.|> Performance

Main *--up--> AlgorithmFactory
Main *--down-> PathVerifier
Main *-left-> Configuration
Main ---> Maze

SolveFactory *-right-> Performance
SolveFactory *--> PathFinder
SolveFactory o--> PathFormatter

VerifyPath *--> Player

RHRuleSol *-left-> Player
BFSSol *--left--> Player
BFSSol o--right--> Position
@enduml